require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/applications", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Application. As you add validations to Application, be sure to
  # adjust the attributes here as well.
  let(:job) {create :job}
  let(:application) {create :application}
  let(:application2) {create :application}

  let(:valid_attributes) {
    attributes_for(:application)
      .slice(*%i[candidate_name]).merge job_id: job.id
  }

  let(:invalid_attributes) {
    {candidate_name: ''}
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ApplicationsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    subject(:get_index) do
      get applications_url(params: params),
          headers: valid_headers,
          as: :json
    end
    let(:params) {{}}
    let(:with_last_event) {Application.with_last_event}
    let(:with_job) {with_last_event.with_job}

    before do
      allow(Application).to receive(:for_active_jobs).and_return Application
      allow(Application).to receive(:with_last_event).and_return with_last_event
      allow(with_last_event).to receive(:with_job).and_return with_job
    end

    context 'when there is no paramter' do
      it 'sends :for_active_jobs to Application' do
        expect(Application).to receive(:for_active_jobs).and_call_original
        get_index
      end
    end

    context 'when there is paramter :all' do
      let(:params) {{all: 1}}

      it 'does not send :for_active_jobs to Application' do
        expect(Application).not_to receive(:for_active_jobs)
        get_index
      end
    end

    it 'sends :with_last_event to Application' do
      application
      expect(Application).to receive(:with_last_event).and_return with_last_event
      get_index
    end

    it 'sends :with_job to Application.with_last_event' do
      application
      expect(with_last_event).to receive(:with_job).and_call_original
      get_index
    end

    it 'sends :with_notes to Application.with_last_event.with_job' do
      application
      expect(with_job).to receive(:with_notes).and_call_original
      get_index
    end

    it "renders a successful response" do
      application
      application2
      get_index
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      application
      get application_url(application), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    subject(:post_create) do
      post applications_url,
          params: { application: attributes },
          headers: valid_headers,
          as: :json
    end

    context "with valid parameters" do
      let(:attributes) {valid_attributes}

      it "creates a new Application" do
        expect {post_create}.to change(Application, :count).by(1)
      end

      it "renders a JSON response with the new application" do
        post_create
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      let(:attributes) {invalid_attributes}

      it "does not create a new Application" do
        expect {post_create}.to change(Application, :count).by(0)
      end

      it "renders a JSON response with errors for the new application" do
        post_create
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    subject(:patch_update) do
      patch application_url(application),
            params: { application: attributes }, headers: valid_headers, as: :json
    end

    context "with valid parameters" do
      let(:attributes) {{candidate_name: 'New name'}}

      it "updates the requested application" do
        application
        patch_update
        application.reload
        expect(application.candidate_name).to eq 'New name'
      end

      it "renders a JSON response with the application" do
        application
        patch_update
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      let(:attributes) {invalid_attributes}

      it "renders a JSON response with errors for the application" do
        application
        patch_update
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested application" do
      application
      expect {
        delete application_url(application), headers: valid_headers, as: :json
      }.to change(Application, :count).by(-1)
    end
  end
end
